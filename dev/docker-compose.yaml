---
version: "3.7"
services:
  db:
    image: postgres:${POSTGRES_IMAGE_TAG:-16}
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      # mount db creation script in place for bootstrap
      - ./config/db:/docker-entrypoint-initdb.d:ro
    networks:
      - internal
  fhir:
    image: hapiproject/hapi:${FHIR_IMAGE_TAG:-v6.8.3}
    environment:
      spring.datasource.url: jdbc:postgresql://db:5432/hapifhir
      spring.datasource.username: postgres
      spring.datasource.password: postgres
      spring.datasource.driverClassName: org.postgresql.Driver
      spring.jpa.properties.hibernate.dialect: ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect

      hapi.fhir.bulk_export_enabled: "true"
      hapi.fhir.bulk_import_enabled: "true"
      # TODO remove when cascading delete generally available in FHIR REST API
      hapi.fhir.enforce_referential_integrity_on_delete: "false"
      # allow direct assignment of resource IDs in any format
      hapi.fhir.client_id_strategy: ANY

      hapi.fhir.server_address: https://fhir.${BASE_DOMAIN}/fhir/

      SPRING_CONFIG_LOCATION: file:///opt/application.yaml
    volumes:
      - ./config/fhir/application.yaml:/opt/application.yaml:ro
    depends_on:
      - db
    networks:
      internal:
        aliases:
          - fhir-internal
      ingress:
    labels:
      - traefik.enable=true
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.rule=Host(`fhir.${BASE_DOMAIN}`)
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # Hapi does not EXPOSE the ports it listens on, requiring explicit traefik configuration
      - traefik.http.services.fhir-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8080

  keycloak:
    # use tini as init
    init: true
    image: quay.io/keycloak/keycloak:${KEYCLOAK_IMAGE_TAG:-22.0}
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.rule=Host(`keycloak.${BASE_DOMAIN}`)
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt
    command:
      # https://www.keycloak.org/server/importExport#_importing_a_realm_during_startup
      # recent Keycloak releases do not allow importing the master realm on startup; use old properties as workaround
      # https://github.com/keycloak/keycloak/issues/12544#issuecomment-1191846726
      - -Dkeycloak.migration.action=import
      - -Dkeycloak.migration.provider=dir
      - -Dkeycloak.migration.dir=/opt/keycloak/data/import
      - -Dkeycloak.migration.strategy=IGNORE_EXISTING
      - -Dkeycloak.migration.replace-placeholders=true
      - start
      - --log-console-output=json
    environment:
      # https://www.keycloak.org/server/all-config
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres

      # https://www.keycloak.org/server/reverseproxy
      KC_PROXY: edge
      # trust traefik Host header validation
      KC_HOSTNAME_STRICT: "false"

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_ECR_FOLLOWUP_BASE: https://ecr-followup.${BASE_DOMAIN}
      KEYCLOAK_ECR_FOLLOWUP_LOGOUT_REDIRECT_URL: https://${BASE_DOMAIN}/users

    env_file:
      - keycloak.env
    volumes:
      - ./config/keycloak/import/:/opt/keycloak/data/import:ro
      - ./config/keycloak/themes/:/opt/keycloak/themes:ro
    depends_on:
      - db
    networks:
      - ingress
      - internal

  fhir-auth:
    image: ghcr.io/uwcirg/jwt-proxy:${PROXY_IMAGE_TAG:-latest}
    env_file:
      fhir-auth.env
    environment:
      UPSTREAM_SERVER: http://fhir-internal:8080
      OIDC_AUTHORIZE_URL: https://keycloak.${BASE_DOMAIN}/realms/waecr/protocol/openid-connect/auth
      OIDC_TOKEN_URI: https://keycloak.${BASE_DOMAIN}/realms/waecr/protocol/openid-connect/token
      OIDC_TOKEN_INTROSPECTION_URI: https://keycloak.${BASE_DOMAIN}/realms/waecr/protocol/openid-connect/token/introspect
      JWKS_URL: https://keycloak.${BASE_DOMAIN}/realms/waecr/protocol/openid-connect/certs
      PATH_WHITELIST: /fhir/metadata,/fhir/.well-known/smart-configuration
    labels:
      - traefik.enable=true
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.rule=Host(`fhir-auth.${BASE_DOMAIN}`)
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # TODO review if necessary for ecr-followup service in same deploy
      # add CORS middleware, configured to return `Access-Control-Allow-Origin: *`
      # NB accessControlAllowOrigin is deprecated, but not noted in docs
      # https://github.com/traefik/traefik/issues/8796
      - traefik.http.middlewares.fhir-auth-${COMPOSE_PROJECT_NAME}-cors.headers.accessControlAllowOriginList=*
      # allow all verbs used by FHIR REST
      - traefik.http.middlewares.fhir-auth-${COMPOSE_PROJECT_NAME}-cors.headers.accessControlAllowMethods=HEAD,GET,OPTIONS,PATCH,POST,PUT,DELETE
      - traefik.http.middlewares.fhir-auth-${COMPOSE_PROJECT_NAME}-cors.headers.accessControlAllowHeaders=Authorization,Origin,Content-Type,Accept,Cache-Control
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.middlewares=fhir-auth-${COMPOSE_PROJECT_NAME}-cors
    depends_on:
      - fhir
    networks:
      - ingress
      - internal

  ecr-followup:
    image: ghcr.io/uwcirg/ecr-followup:${ECR_FOLLOWUP_IMAGE_TAG:-latest}
    environment:
      VITE_SOF_ISS: https://fhir-auth.${BASE_DOMAIN}/fhir
      VITE_OIDC_SERVER_BASE: https://keycloak.${BASE_DOMAIN}
      VITE_OIDC_LOGOUT_ENDPOINT: https://keycloak.${BASE_DOMAIN}/realms/waecr/protocol/openid-connect/logout
      VITE_OIDC_CHECK_SESSION_IFRAME: https://keycloak.${BASE_DOMAIN}/realms/waecr/protocol/openid-connect/login-status-iframe.html
      VITE_POST_LOGOUT_REDIRECT_URI: https://${BASE_DOMAIN}/users
    env_file:
      ecr-followup.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.ecr-followup-${COMPOSE_PROJECT_NAME}.rule=Host(`ecr-followup.${BASE_DOMAIN}`)
      - traefik.http.routers.ecr-followup-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.ecr-followup-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.ecr-followup-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt
    networks:
      - ingress

volumes:
  db-data: {}
networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    external: true
    name: external_web
